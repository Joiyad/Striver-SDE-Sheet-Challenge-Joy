void leftView(vector<int> &ans, int level, TreeNode<int>* root){
    // base case
    if(root == NULL) return;

    if(level == ans.size()) ans.push_back(root->data);
    // recursive call for left subtree
    leftView(ans, level+1, root->left);
    // recursive call for right subtree
    leftView(ans, level+1, root->right);
}

vector<int> getLeftView(TreeNode<int> *root)
{
    // Intution: since we have to find left view so root->left->right will be order of iteration
    // T=O(n) S=O(n)
    vector<int> ans;
    // level order traversal and initially level will be 0
    leftView(ans, 0, root);
    return ans;
}
