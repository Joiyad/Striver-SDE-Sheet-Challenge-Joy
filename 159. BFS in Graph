#include <bits/stdc++.h> 
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    // bfs traversal
    // T=O(V+E) S=O(V)
    vector<int> adj[vertex];
    // make adjacency list
    for(auto it: edges){
        adj[it.first].push_back(it.second);
        adj[it.second].push_back(it.first);
    }

    // since we require output in lexicographically order
    for(int i=0; i<vertex; i++){
        sort(adj[i].begin(), adj[i].end());
    }

    vector<int> vis(vertex, 0);
    vector<int> ans;

    for(int i = 0; i < vertex ; i++){
        queue<int> q;
        if(vis[i] == 0){
            vis[i] = 1;
            q.push(i);
            while(!q.empty()){
                int top = q.front();
                q.pop();
                ans.push_back(top);
                for(auto it: adj[top]){     
                    if(vis[it] == 0){
                        q.push(it);
                        vis[it] = 1;
                    } 
                }
            }
        }
    }
    return ans;
}
