int length(Node *head){
    int count = 0;
    while(head){
        count++;
        head = head->next;
    }
    return count;
}

Node* findIntersection(Node *firstHead, Node *secondHead)
{
    // Approach 1: we can simply find the length of both linked lists and using two pointers
    // iterate the pointer of larger linked list by k so that they will be at same distance from common 
    // node
    // T=O(3*n) S=O(1)
    // find lengths of two linked lists
    int l1 = length(firstHead);
    int l2 = length(secondHead);

    int k = abs(l1-l2);

    while(k--){
        if(l1>l2){
            firstHead = firstHead->next;
        }
        else secondHead = secondHead->next;
    }

    while(firstHead && secondHead){
        if(firstHead == secondHead) return firstHead;
        firstHead = firstHead->next;
        secondHead = secondHead->next;
    }
    return NULL;

    // Approach 2: we can use two pointers and iterate them in such a manner that each will iterate l1+l2
    // T=O(n) S=O(1)
    Node* dummy1 = firstHead;
    Node* dummy2 = secondHead;

    while(dummy1 != dummy2){
        dummy1 = dummy1==NULL ? dummy1=secondHead : dummy1->next;
        dummy2 = dummy2==NULL ? dummy2=firstHead : dummy2->next;
    }

    return dummy1;
}
