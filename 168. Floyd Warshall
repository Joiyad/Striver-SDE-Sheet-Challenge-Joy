int floydWarshall(int n, int m, int src, int dest, vector<vector<int>> &edges) {
  // Floyd Warshall Algorithm: we have to find paths via every node
  // T=(V^3) S=O(V^2)

  vector<vector<int>> dist(n+1, vector<int> (n+1, 1e9));
  // initialize distance array
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      if (i == j) dist[i][j] = 0;
    }
  }

  for(int i=0; i<edges.size(); i++){
      int u = edges[i][0];
      int v= edges[i][1];
      int wt = edges[i][2];
      dist[u][v] = wt;
  }

  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      for (int k = 1; k <= n; k++) {
        if(dist[j][i]!=1e9 && dist[i][k]!=1e9) dist[j][k] = min(dist[j][k], dist[j][i] + dist[i][k]);
      }
    }
  }

  return dist[src][dest];
}
