#include<bits/stdc++.h>

int solve(int i, int n, vector<int> &price, vector<vector<int>> &dp){
        // base case
        if(i>=n) return 0;
        if(dp[i][n] != -1) return dp[i][n];
        
        // try all cases
        int notPick = solve(i+1, n, price, dp);
        int pick = INT_MIN;
        if(i+1 <= n) pick = price[i] + solve(i, n-(i+1), price, dp);
        
        // return 
        return dp[i][n] = max(pick, notPick);
    }

int cutRod(vector<int> &price, int n)
{
	// try out all possible ways --> recursion
	// overlapping subproblems --> dp
	// memoisation
	// T=O(n*n) S=O(n*n)
	vector<vector<int>> dp(n, vector<int> (n+1, -1));
    return solve(0, n, price, dp);

	// Tabulation
	vector<vector<int>> dp(n, vector<int> (n+1, 0));
	for(int i=0; i<=n; i++){
		dp[0][i] = price[0]*i;
	}

	for(int i=1; i<n; i++){
		for(int j=0; j<=n; j++){
			int notPick = dp[i-1][j];
        	int pick = INT_MIN;
        	if(i+1 <= j) pick = price[i] + dp[i][j-(i+1)];
        
         	dp[i][j] = max(pick, notPick);
		}
	}
	return dp[n-1][n];

	// Space optimization
	// T=O(n*n) S=O(n)
	vector<int> prev(n+1, 0), curr(n+1, 0);
	for(int i=0; i<=n; i++){
		prev[i] = price[0]*i;
	}

	for(int i=1; i<n; i++){
		for(int j=0; j<=n; j++){
			int notPick = prev[j];
        	int pick = INT_MIN;
        	if(i+1 <= j) pick = price[i] + curr[j-(i+1)];
        
         	curr[j] = max(pick, notPick);
		}
		prev = curr;
	}
	return prev[n];
}
