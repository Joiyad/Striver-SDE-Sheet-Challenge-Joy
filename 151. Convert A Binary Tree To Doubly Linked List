#include <bits/stdc++.h> 
// recursive
void makeDLL(BinaryTreeNode<int>* root, BinaryTreeNode<int>* &pre, BinaryTreeNode<int>* &head){
    if(root == NULL) return;

    makeDLL(root->left, pre, head);
    if(pre == NULL) head = root;
    else{
        pre->right = root;
        root->left = head;
    }
    pre = root;
    makeDLL(root->right, pre, head);
}

// iterative
BinaryTreeNode<int>* BTtoDLL(BinaryTreeNode<int>* root) {
    // From Observation, we can see Morris Traversal inorder will convert given binary tree
    // to doubly linked list
    // iterative method
    // T=O(n) S=O(1)
    BinaryTreeNode<int>* head = NULL;
    BinaryTreeNode<int>* prev = NULL;
    BinaryTreeNode<int>* curr = root;

    while(curr != NULL){
        if(curr->left == NULL){
            // head will store head of linked list
            if(head == NULL) head = curr;
            curr->left = prev;
            if(prev) prev->right = curr;
            prev = curr;
            curr = curr->right;
        }
        else{
            BinaryTreeNode<int>* next = curr->left;
            // move to extreme right
            while(next->right != NULL && next->right != curr) next = next->right;
            if(next->right == NULL){
                next->right = curr;
                curr = curr->left;
            }
            else{
                curr->left = prev;
                prev = curr;
                curr = curr->right;
            }

        }
    }
    return head;

    // recursive solution
    // T=O(n) S=O(n)
    BinaryTreeNode<int>* pre = NULL;
    BinaryTreeNode<int>* head = NULL;
    makeDLL(root, pre, head);
    return head;

}
