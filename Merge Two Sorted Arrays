vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {
	// brute force can be simply using extra space and store elements in another array

	// optimized approach: since mentioned no extra space should be used we can swap zeroes with 
	// second array's elements and sort it
	// T=O(n)+O(mlogm) S=O(1);
	for(int k=0; k<n; k++){
		arr1[m+k] = arr2[k];
	}

	sort(arr1.begin(), arr1.end());

	return arr1;


	// another approach: merge sort algorithm can be used but from last element this time
	// fill the elements which are larger first.
	// T=O(m+n) S=O(1);
	int i=m-1;
	int j=n-1;
	int k = m+n-1;

	while(i>=0 && j>=0){
		if(arr1[i] >= arr2[j]){
			arr1[k] = arr1[i];
			i--;
		}
		else{
			arr1[k] = arr2[j];
			j--;
		}
		k--;
	}

	// store remaining elements if any
	while(j>=0){
		arr1[k] = arr2[j];
		j--;
		k--;
	}

	return arr1;
}
