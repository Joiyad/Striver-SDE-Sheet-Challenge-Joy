#include <bits/stdc++.h>

int search(int* arr, int n, int target) {
    // Approach 1: linear search
    // T=O(n) S=O(1)
    for(int i=0; i<n; i++){
      if(arr[i] == target) return i;
    }
    return -1;

    // Approach 2: given sorted --> binary search
    // check which portion is sorted with respect to mid and take corresponding step
    // T=O(logn) S=O(1)
    int low = 0;
    int high = n-1;

    while(low <= high){
        int mid = (low+high)>>1;
        if(arr[mid] == target) return mid;
        // if array is sorted in left side
        if(arr[low]<=arr[mid]){
            // if target lies in range [low, mid]
            if(arr[low] <= target && target <= arr[mid]){
                high = mid-1;
            }
            else low = mid+1;
        }
        // if array is sorted in right side
        else{
            // if target lies in range [mid, high]
            if(arr[mid] <= target && target <= arr[high]){
                low = mid+1;
            }
            else high = mid-1;
        }
    }
    return -1;
}
