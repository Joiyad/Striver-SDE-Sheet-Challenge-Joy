#include <bits/stdc++.h>
int lengthOfLongestConsecutiveSequence(vector<int> &arr, int n) {
    // brute force: simply sort the array and iterate to check the longest consecutive sequence
    // T=O(nlon) + O(n) S=O(1)
    int maxLen = 1;
    int len = 1;

    // // step 1: sort the array
    sort(arr.begin(), arr.end());
    for(int i=1; i<n; i++){
        if(arr[i]-arr[i-1] == 1) len++;
        // to handle duplicates
        else if(arr[i] == arr[i-1]) continue;
        else{
            maxLen = max(maxLen, len);
            len = 1;
        }
    }
    maxLen = max(maxLen, len);
    return maxLen;

    // Approach 2: using set
    // TLE for large cases
    unordered_set<int> s;
    for(int i=0; i<n; i++) s.insert(arr[i]);

    int ans = 0;
    for(int i=0; i<n; i++){
        if(s.find(arr[i]-1) != s.end()) continue;
        else{
            int len = 0;
            int element = arr[i];
            while(s.find(element) != s.end()){
                len++;
                element++;
            }
            ans = max(ans, len);
        }
    }

    return ans;
    
}
