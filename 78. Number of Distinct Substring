#include <bits/stdc++.h> 
struct Node{
    Node* links[26];

    bool containsKey(char ch){
        return (links[ch-'a'] != NULL);
    }

    void put(char ch, Node* node){
        links[ch-'a'] = node;
    }

    Node* get(char ch){
        return links[ch-'a'];
    }
};

int distinctSubstring(string &word) {
    // Brute force: using nested loops and set
    // T=O(n^2) S=O(n)
    set<string> s;
    int n = word.size();
    for(int i=0; i<n; i++){
        string temp = "";
        for(int j=i; j<n; j++){
            temp += word[j];
            s.insert(temp);
        }
    }

    return s.size();

    // Approach: using trie
    // T=O(n^2) S=O(n^2)
    Node* root = new Node();
    int count = 0;
    int n = word.size();

    for(int i=0; i<n; i++){
        Node* node = root;
        for(int j=i; j<n; j++){
            if(!node->containsKey(word[j])){
                node->put(word[j], new Node());
                count++;
            }
            node = node->get(word[j]);
        }
    }
    // empty string is also included
    return count;
}
