#include <bits/stdc++.h> 
vector<int> kMaxSumCombination(vector<int> &a, vector<int> &b, int n, int k){
	// brute force
	// T=O(n^2)+O(k) S=O(n)
	priority_queue<int> pq;
	for(int i=0; i<n; i++){
		for(int j=0; j<n; j++){
			pq.push(a[i]+b[j]);
		}
	}

	vector<int> ans;
	while(k--){
		ans.push_back(pq.top());
		pq.pop();
	}
	return ans;

	// Optimized approach: we will use heap and set
	// T=O(nlogn)+O(k) S=O(n)
	priority_queue<pair<int, pair<int, int>>> pq;
	sort(a.begin(), a.end(), greater<int>());
	sort(b.begin(), b.end(), greater<int>());
	set<pair<int, int>> s;
	vector<int> ans;
	pq.push({a[0]+b[0], {0, 0}});
	s.insert({0, 0});

	for(int i=0; i<k; i++){
		auto it = pq.top();
		pq.pop();
		ans.push_back(it.first);

		if(it.second.first+1<n && s.find({it.second.first+1, it.second.second}) == s.end()){
			s.insert({it.second.first+1, it.second.second});
			pq.push({a[it.second.first+1] + b[it.second.second], {
        	it.second.first + 1, it.second.second}});
        }

		if(it.second.second+1<n && s.find({it.second.first, it.second.second+1}) == s.end()){
			s.insert({it.second.first, it.second.second+1});
			pq.push({a[it.second.first] + b[it.second.second+1], {
        	it.second.first, it.second.second+1}});
        }
	}
	return ans;
}
