#include <bits/stdc++.h> 
struct Node{
    Node* links[26];
    bool flag = false;

    bool containsKey(char ch){
        return (links[ch-'a'] != NULL);
    }

    Node* get(char ch){
        return links[ch-'a'];
    }

    void put(char ch, Node* node){
        links[ch-'a'] = node;
    }

    void setEnd(){
        flag = true;
    }

    bool isEnd(){
        return flag;
    }
};

class Trie{
    private:
        Node* root;
    
    public:
        Trie(){
            root = new Node();
        }

        void insert(string word){
            Node* node = root;
            for(int i=0; i<word.size(); i++){
                if(!node->containsKey(word[i])){
                    node->put(word[i], new Node());
                }
                node = node->get(word[i]);
            }
            node->setEnd();
        }

        bool isPrefixExists(string word){
            Node* node = root;
            bool flag = true;
            for(int i=0; i<word.size(); i++){
                if(node->containsKey(word[i])){
                    node = node->get(word[i]);
                    flag = flag & node->isEnd(); 
                }
                else return false;
            }
            return flag;
        }
};

string completeString(int n, vector<string> &a){
    // Approach: we can use Trie
    Trie* trie = new Trie();
    for(auto it: a){
        trie->insert(it);
    }

    string ans = "";

    for(auto it: a){
        if(trie->isPrefixExists(it)){
            if(it.length() > ans.length()){
                ans = it;
            }
            else if(it.length() == ans.length() && it < ans){
                ans = it;
            }
        }
    }

    if(ans == "") return "None";
    return ans;
}
