bool isPalindrome(int low, int high, string str){
    while(low < high){
        if(str[low] != str[high]) return false;
        low++;
        high--;
    }
    return true;
}

string longestPalinSubstring(string str)
{
    // Brute Approach: since we have to check longest palindrome, we will check each substring
    // T=O(n^3) S=O(1)
    // int n = str.size();
    string ans = "";
    for(int i=0; i<n; i++){
        string temp;
        for(int j=i; j<n; j++){
            if(isPalindrome(i, j, str)){
                temp = str.substr(i, j-i+1);
            }
        }
        if(temp.length() > ans.length()) ans = temp;
    }

    return ans;

    // Optimized Approach: expansion around centre
    // T=O(n^2) S=O(1)

    int n = str.size();
    int l, r;
    int start = 0;
    int end = 1; 
    for(int i=0; i<n; i++){
        // if even substring
        l = i-1; 
        r = i;
        while(l>=0 && r<n && str[l] == str[r]){
            if(r-l+1 > end){
                start = l;
                end = r-l+1;
            }
            l--;
            r++;
        }

        // if odd substring
        l = i-1;
        r = i+1;
        while(l>=0 && r<n && str[l] == str[r]){
            if(r-l+1 > end){
                start = l;
                end = r-l+1;
            }
            l--;
            r++;
        }
    }
    return str.substr(start, end);
}
