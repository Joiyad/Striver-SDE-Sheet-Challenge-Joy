#include <bits/stdc++.h>

int solve(int i, int j, string s, string t, vector<vector<int>> &dp){
	// base case
	if(i<0 || j<0) return 0;
	if(dp[i][j] != -1) return dp[i][j];

	// try all stuff
	if(s[i] == t[j]) return dp[i][j] = 1+solve(i-1, j-1, s, t, dp);
	return dp[i][j] = max(solve(i-1, j, s, t, dp), solve(i, j-1, s, t, dp));
}

int lcs(string s, string t)
{
	// Since we have to find all possible subsequence and longest among them, recursion can be used
	int n = s.size();
	int m = t.size();
	// return solve(n-1, m-1, s, t);

	// since overlapping subproblems we can memoise it
	// T=O(m*n) S=O(m*n)+recursive stack space
	vector<vector<int>>dp(n+1, vector<int> (m+1, 0));
	return solve(n-1, m-1, s, t, dp);

	// Tabulation
	// space optimization
	// T=O(n*m) S=O(m)
	vector<int> prev(m+1, 0), curr(m+1, 0);
	for(int i=1; i<=n; i++){
		for(int j=1; j<=m; j++){
			if(s[i-1] == t[j-1]) curr[j] = 1+prev[j-1];
			else curr[j] = max(prev[j], curr[j-1]);
		}
		prev = curr;
	}
	return prev[m];
}
