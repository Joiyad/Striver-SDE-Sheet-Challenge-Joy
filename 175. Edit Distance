int solve(int i, int j, string str1, string str2, vector<vector<int>> &dp){
    // base case
    if(i<0 && j<0) return 0;
    if(i<0 && j>=0) return j+1;
    if(i>=0 && j<0) return i+1;
    if(dp[i][j] != -1) return dp[i][j];

    // try all stuff
    if(str1[i] == str2[j]) return dp[i][j] = solve(i-1, j-1, str1, str2, dp);
    else return dp[i][j] = 1 + min(solve(i-1, j, str1, str2, dp), min(solve(i-1, j-1, str1, str2, dp), solve(i, j-1, str1, str2, dp)));
}

int editDistance(string str1, string str2)
{
    // since we have to apply all operations and try out all combinations we will apply 
    // recursion and later on dp
    int n = str1.size();
    int m = str2.size();
    // return solve(n-1, m-1, str1, str2);

    // memoisation
    // T=O(m*n) S=O(m*n)
    vector<vector<int>> dp(n, vector<int>(m, -1));
    return solve(n-1, m-1, str1, str2, dp);

    // tabulation
    // T=O(n*m) S=O(n*m) no recursive stack space
    vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
    for(int i=1; i<=n; i++) dp[i][0] = i;
    for(int j=1; j<=m; j++) dp[0][j] = j;

    for(int i=1; i<=n; i++){
        for(int j=1; j<=m; j++){
            if(str1[i-1] == str2[j-1]) dp[i][j] = dp[i-1][j-1];
            else dp[i][j] = 1 + min(dp[i-1][j], min(dp[i-1][j-1], dp[i][j-1]));
        }
    }
    return dp[n][m];

    // space optimization
    // T=O(n*m) S=O(m)
    vector<int> prev(m+1, 0), curr(m+1, 0);
    for(int j=1; j<=m; j++) prev[j] = j;

    for(int i=1; i<=n; i++){
        curr[0] = i;
        for(int j=1; j<=m; j++){
            if(str1[i-1] == str2[j-1]) curr[j] = prev[j-1];
            else curr[j] = 1 + min(prev[j], min(prev[j-1], curr[j-1]));
        }
        prev = curr;
    }
    return prev[m];
}
