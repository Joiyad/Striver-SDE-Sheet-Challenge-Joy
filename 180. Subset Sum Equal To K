#include <bits/stdc++.h> 
bool solve(int ind, int k, vector<int> &arr, vector<vector<int>> &dp){
    // base case
    if(k == 0) return true;
    if(ind == 0) return arr[0] == k;
    if(dp[ind][k] != -1) return dp[ind][k];

    // try all stuff
    bool notPick = solve(ind-1, k, arr, dp);
    bool pick = false;
    if(k>=arr[ind]) pick = solve(ind-1, k-arr[ind], arr, dp);

    // return 
    return dp[ind][k] = pick || notPick;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // find all possible ways --> recursion
    // overlapping subproblems --> dp
    // memoisation
    // T=O(n*k) S=O(n*k) + recursive stack space
    vector<vector<int>> dp(n, vector<int> (k+1, -1));
    return solve(n-1, k, arr, dp);

    // Tabulation
    // T=O(n*k) S=O(n*k)
    vector<vector<int>> dp(n, vector<int> (k+1, 0));
    for(int i=0; i<n; i++) dp[i][0] = 1;
    if(arr[0]<=k) dp[0][arr[0]] = 1;

    for(int i=1; i<n; i++){
        for(int j=1; j<=k; j++){
            bool notPick = dp[i-1][j];
            bool pick = false;
            if(j>=arr[i]) pick = dp[i-1][j-arr[i]];

            dp[i][j] = pick || notPick;
        }
    }
    return dp[n-1][k];

    // Space Optimization
    // T=O(n*k) S=O(k)
    vector<int> prev(k+1, 0), curr(k+1, 0);
    prev[0] = curr[0] = 1;
    if(arr[0]<=k) prev[arr[0]] = 1;

    for(int i=1; i<n; i++){
        for(int j=1; j<=k; j++){
            bool notPick = prev[j];
            bool pick = false;
            if(j>=arr[i]) pick = prev[j-arr[i]];

            curr[j] = pick || notPick;
        }
        prev = curr;
    }
    return prev[k];
}
