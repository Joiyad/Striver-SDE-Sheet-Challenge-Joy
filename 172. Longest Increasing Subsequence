#include <bits/stdc++.h>

// Memoisation
int solve(int arr[], int n, int ind, int prev, vector<vector<int>> &dp){
    // base case 
    if(ind == n) return 0;
    if(dp[ind][prev+1] != -1) return dp[ind][prev+1];

    // try all stuff
    int take = 0;
    if(prev == -1 || arr[ind] > arr[prev]) take = 1+solve(arr, n, ind+1, ind, dp);
    int notTake = solve(arr, n, ind+1, prev, dp);

    // return maxm
    return dp[ind][prev+1] = max(take, notTake);
}

int longestIncreasingSubsequence(int arr[], int n)
{
    // Approach 1: using bound (iterative method)
    // T=O(n) S=O(n)
    vector<int> v;
    v.push_back(arr[0]);

    for(int i=1; i<n; i++){
        if(arr[i] > v.back()){
            v.push_back(arr[i]);
        }
        else{
            int ind = lower_bound(v.begin(), v.end(), arr[i])-v.begin();
            v[ind] = arr[i];
        }
    }
    return v.size();

    // Approach 2: using dp
    // T=O(n*n) S=O(n*n)
    vector<vector<int>> dp(n, vector<int>(n+1, -1));
    // we will keep track of prev index
    return solve(arr, n, 0, -1, dp);

    // Tabulation
    vector<vector<int>> dp(n+1, vector<int> (n+1, -1));
    for(int i=n-1; i>=0; i--){
        for(int j=i-1; j>=-1; j--){
            int take = 0;
            if(j==-1 || arr[i]>arr[j]) take =  1+dp[i+1][i+1];
            int notTake = dp[i+1][j+1];
            dp[i][j+1] = max(take, notTake);
        }
    }
    return dp[0][0];
}
