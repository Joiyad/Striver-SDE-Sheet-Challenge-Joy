#include <bits/stdc++.h> 
// brute force
void solve(int i, vector<int> &arr, vector<int> v, set<vector<int>> &s){
    // base case
    if(i == arr.size()){
        sort(v.begin(), v.end());
        s.insert(v);
        return;
    }

    // try all possibilities
    v.push_back(arr[i]);
    solve(i+1, arr, v, s);
    v.pop_back();
    solve(i+1, arr, v, s);
}

// optimal
void solve(int i, vector<int> &arr, vector<int> &v, vector<vector<int>> &ans){
    // base case
    ans.push_back(v);

    // try all possibilities
    for(int j=i; j<arr.size(); j++){
        if(j>i && arr[j] == arr[j-1]) continue;
        v.push_back(arr[j]);
        solve(j+1, arr, v, ans);
        v.pop_back();
    }
}

vector<vector<int>> uniqueSubsets(int n, vector<int> &arr)
{
    // Brute force Approach: since we have to find all possible subsets this gives a hint of recursion
    // we will use set so that not duplicates should present and use pick and notPick concept
    // T=O(2^n*klogx) S=O(recursive stack*k)
    set<vector<int>> s;
    vector<int> v;
    vector<vector<int>> ans;
    solve(0, arr, v, s);

    for(auto it: s){
        ans.push_back(it);
    }

    return ans;

    // Optimal Approach: we can slightly improve our time and space complexity by not using set
    vector<int> v;
    vector<vector<int>> ans;
    sort(arr.begin(), arr.end());
    solve(0, arr, v, ans);

    return ans;
}
