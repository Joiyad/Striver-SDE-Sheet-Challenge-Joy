#include <bits/stdc++.h>

int subarraysXor(vector<int> &arr, int x)
{
    // brute force
    // T=O(n^2) S=O(1)
    int n = arr.size();
    int count=0;
    for(int i=0; i<n; i++){
        int tempxor = 0;
        for(int j=i; j<n; j++){
            tempxor = tempxor^arr[j];
            if(tempxor == x) count++;
        }
    }
    return count;

    // Approach 2: using hashmap
    // intution is as we are moving, we can store prefix xor.
    int n = arr.size();
    unordered_map<int, int> umap;
    int tempxor = 0;
    int count = 0;
    umap[tempxor]++;

    for(int i=0; i<n; i++){
        tempxor = tempxor^arr[i];
        int temp2 = tempxor^x;
        count += umap[temp2];
        umap[tempxor]++;
    }

    return count;

}
