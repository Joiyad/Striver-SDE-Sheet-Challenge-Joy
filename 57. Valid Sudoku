bool isValid(int row, int col, int n, int matrix[9][9]){
    // base case
    for(int i=0; i<9; i++){
        // if same no. is present in row
        if(matrix[i][col] == n) return false;

        //if same no. is present in col
        if(matrix[row][i] == n) return false;

        // if same no. is present in 3*3 submatrix
        if(matrix[3*(row/3) + i/3][3*(col/3) + i%3] == n) return false;
    }
    return true;
}

bool isItSudoku(int matrix[9][9]) {
    // Approach: we will find empty box and check by filling each no. from 1->9 
    // if the same no. is found then return false as two same no. can't exist in same row
    // same col and submatrix.
    // T=O(9^(n^2)) S=O(1)
    for(int i=0; i<9; i++){
        for(int j=0; j<9; j++){
            if(matrix[i][j] == 0){
                for(int n=1; n<=9; n++){
                    if(isValid(i, j, n, matrix)){
                        matrix[i][j] = n;
                        if(isItSudoku(matrix)) return true;
                        else matrix[i][j] = 0;
                    }
                }
                return false;
            }
        }
    }
    return true;
}
