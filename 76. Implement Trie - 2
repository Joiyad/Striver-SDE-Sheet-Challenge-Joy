#include <bits/stdc++.h> 
struct Node {
	Node *links[26];
	int countEndWith = 0;
	int countPrefix = 0;

	bool containKey(char ch) {
		return (links[ch - 'a'] != NULL);
	}

	void put(char ch, Node *node) {
		links[ch - 'a'] = node;
	}

	Node *get(char ch) {
		return links[ch - 'a'];
	}

	void increaseEnd(){
		countEndWith++;
	}

	void increasePrefix(){
		countPrefix++;
	}
	
	void deleteEnd(){
		countEndWith--;
	}

	void reducePrefix(){
		countPrefix--;
	}

	int getEnd(){
		return countEndWith;
	}

	int getPrefix(){
		return countPrefix;
	}
};

class Trie{
    private: 
        Node* root;

    public:

    Trie(){
        // Write your code here.
        root = new Node();
    }

    void insert(string &word){
        Node *node = root;
		for (int i = 0; i < word.size(); i++) {
			if (!node->containKey(word[i])) {
				node->put(word[i], new Node());
			}
			node = node->get(word[i]);
			node->increasePrefix();
		}
		node->increaseEnd();
    }

    int countWordsEqualTo(string &word){
        Node *node = root;
        int count = 0;
		for (int i = 0; i < word.size(); i++) {
			if (!node->containKey(word[i])) {
				return 0;
			}
			else node = node->get(word[i]);
		}
		return node->getEnd();
    }

    int countWordsStartingWith(string &word){
        Node* node = root;
		for (int i = 0; i < word.size(); i++) {
			if (!node->containKey(word[i])) {
				return 0;
			}
			else node = node->get(word[i]);
		}
		return node->getPrefix();
    }

    void erase(string &word){
        Node* node = root;
		for(int i=0; i<word.size(); i++){
			if(node->containKey(word[i])){
				node = node->get(word[i]);
				node->reducePrefix();
			}
			else return;
		}
		node->deleteEnd();
    }
};
