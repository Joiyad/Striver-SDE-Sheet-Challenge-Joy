vector<int> bottomView(BinaryTreeNode<int> * root){

    // Approach: draw vertical lines and in a line we will be able to see only one node
    // from bottom view
    // T=O(n) S=O(n)
    vector<int> ans;
    if(root == NULL) return ans;

    // map of line and corresponding node value
    map<int, int> umap;
    // store node and line number
    queue<pair<BinaryTreeNode<int>*, int>> q;
    q.push({root, 0});

    while(!q.empty()){
        auto it = q.front();
        q.pop();
        BinaryTreeNode<int>* node = it.first;
        int line = it.second;
        umap[line] = node->data;

        if(node->left) q.push({node->left, line-1});
        if(node->right) q.push({node->right, line+1});
    }

    for(auto it: umap){
        ans.push_back(it.second);
    }  

    return ans; 
}
