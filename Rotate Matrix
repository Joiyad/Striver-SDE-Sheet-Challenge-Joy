void rotateMatrix(vector<vector<int>> &mat, int n, int m)
{
    // brute force: we can use extra space and just copy the element since inplace is mentioned so it is not a good approach

    // approach 2: we can set 4 variables to iterate in matrix and rotate accordingly
    int sr = 0, sc = 0, er = n-1, ec = m-1;

    while(sr<er && sc<ec){
        // for top row
        int temp = mat[sr][sc];
        for(int i=sc+1; i<=ec; i++){
            int k = mat[sr][i];
            mat[sr][i] = temp;
            temp = k;
        }
        sr++;

        // for right col
        for(int i=sr; i<=er; i++){
            int k = mat[i][ec];
            mat[i][ec] = temp;
            temp = k;
        }
        ec--;

        // for bottom row
        for(int i=ec; i>=sc; i--){
            int k = mat[er][i];
            mat[er][i] = temp;
            temp = k;
        }
        er--;

        // for left row
        for(int i=er; i>=sr; i--){
            int k = mat[i][sc];
            mat[i][sc] = temp;
            temp = k;
        }
        sc++;

        // it is necessary to modify the first element as it was not updated in above code
        mat[sr-1][sc-1] = temp;
    }
