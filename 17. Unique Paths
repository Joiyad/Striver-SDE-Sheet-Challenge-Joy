#include <bits/stdc++.h> 
int solve(int i, int j, vector<vector<int>> &dp){
	// base case 
	if(i<0 || j<0) return 0;
	if(i == 0 && j == 0) return 1;
	if(dp[i][j] != -1) return dp[i][j];

	// trying all possibilities
	return dp[i][j] = solve(i-1, j, dp) + solve(i, j-1, dp);
}

int uniquePaths(int m, int n) {
	vector<vector<int>> dp(m, vector<int> (n, 0));
	// Approach 1: recursion and memoization
	// intution is that we have to find the total no. of paths in such scenerios recursion can be used.
	return solve(m-1, n-1, dp);

	// Tabulation
	for(int i=0; i<m; i++){
		for(int j=0; j<n; j++){
			if(i==0 && j==0) dp[i][j] = 1;
			else{
				int up = 0;
				int left = 0;
				if(i>=1) up = dp[i-1][j];
				if(j>=1) left = dp[i][j-1];
				dp[i][j] = up+left;
			}
		}
	}

	return dp[m-1][n-1];

	// space optimization
	vector<int> prev(n, 0), curr(n, 0);
	for(int i=0; i<m; i++){
		for(int j=0; j<n; j++){
			if(i==0 && j==0) curr[j] = 1;
			else{
				int up = 0;
				int left = 0;
				if(i>=1) up = prev[j];
				if(j>=1) left = curr[j-1];
				curr[j] = up+left;
			}
		}
		prev = curr;
	}

	return prev[n-1];

	// Approach 2: mathematical or combinational approach
	int N = m+n-2;
	int r = m-1;

	double res = 1;
	for(int i=1; i<=r; i++){
		res = res*(N-r+i)/i;
	}
	return (int)res;
}
