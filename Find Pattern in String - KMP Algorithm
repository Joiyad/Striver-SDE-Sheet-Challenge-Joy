#include <bits/stdc++.h> 
bool findPattern(string pattern, string text)
{
    // KMP Algorithm: we will make longest prefix table or pie table and check if some part 
	// of pattern is repeating or not
	// T=O(m+n) S=O(1)
	int n = pattern.size();
	vector<int> pi(n, 0);

	// fill the lps table
	for(int i=1; i<n; i++){
		int j=pi[i-1];
		// if pattern characters are not repeating
		while(j>0 && pattern[i] != pattern[j]) j=pi[j-1];

		// if repeating
		if(pattern[i] == pattern[j]) j++;
		pi[i]=j;
	}

	int i=0, j=0;
	while(i<text.size()){
		if(text[i] == pattern[j]){
			i++;
			j++;
		}
		else{
			if(j!=0) j=pi[j-1];
			else i++;
		}
		if(j==pattern.size()){
			return true;
			j=pi[j-1];
		}
	}

	return false;
}
