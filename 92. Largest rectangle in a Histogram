 #include <bits/stdc++.h>
 
 // function for finding next smaller element
 vector<int> nextSmaller(vector<int> &heights, int n){
    stack<int> st;
    vector<int> v(n);
    st.push(-1);

    for(int i=n-1; i>=0; i--){
      int curr = heights[i];
      while(st.top() != -1 && heights[st.top()] >= curr){
        st.pop();
      }
      v[i] = st.top();
      st.push(i);
    }

    return v;
 }

 // function for finding prev smaller element
 vector<int> prevSmaller(vector<int> &heights, int n){
    stack<int> st;
    vector<int> v(n);
    st.push(-1);

    for(int i=0; i<n; i++){
      int curr = heights[i];
      while(st.top() != -1 && heights[st.top()] >= curr){
        st.pop();
      }
      v[i] = st.top();
      st.push(i);
    }

    return v;
 }
 
 int largestRectangle(vector < int > & heights) {
   // Intution: we have to keep track of next smaller and prev smaller element for each 
   // element in array
   int n = heights.size();
   vector<int> next;
   vector<int> prev;
   next = nextSmaller(heights, n);
   prev = prevSmaller(heights, n);
   int maxArea = 0;

   for(int i=0; i<n; i++){
      int length = heights[i];
      if(next[i] == -1){
        next[i] = n;
      }

      int breadth = next[i]-prev[i]-1;
      maxArea = max(maxArea, length*breadth);
   }

   return maxArea;
 }
