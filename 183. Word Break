#include <bits/stdc++.h>
bool solve(int ind, vector<string> &dictionary, int size, string s,
           vector<int> dp) {
  // base case
  if (ind == size)
    return true;
  if (dp[ind] != -1)
    return dp[ind];

  // try all stuff
  for (auto it : dictionary) {
    if (s.substr(ind, it.size()) == it &&
        solve(ind + it.size(), dictionary, size, s, dp))
      return dp[ind] = true;
  }
  return dp[ind] = false;
}

bool wordBreak(vector<string> &dictionary, int n, string &s) {
  // Memoization
  // T=O(n*n*n) S=O(n)
  vector<int> dp(s.size() + 1, -1);
  return solve(0, dictionary, s.size(), s, dp);

  // Tabulation
  n = s.size();
  vector<int> dp(n + 1, 0);

  dp[n] = 1;
  for (int i = n - 1; i >= 0; i--) {
    for (auto word : dictionary) {
      if (i + word.size() <= n and s.substr(i, word.size()) == word &&
          dp[i + word.size()])
        dp[i] = true;
    }
  }

  return dp[0];
}
