int solve(vector<int> &values, vector<int> &weights, int w, int ind,
          vector<vector<int>> &dp) {
  // base case
  if (w <= 0)
    return 0;
  if (ind == 0) {
    if (w >= weights[0])
      return values[0];
    return 0;
  }
  if (dp[ind][w] != -1)
    return dp[ind][w];

  // try all stuff
  int notPick = solve(values, weights, w, ind - 1, dp);
  int pick = 0;
  if (w - weights[ind] >= 0)
    pick = values[ind] + solve(values, weights, w - weights[ind], ind - 1, dp);

  // return
  return dp[ind][w] = max(pick, notPick);
}

int maxProfit(vector<int> &values, vector<int> &weights, int n, int w) {
  // Since we have to find best among all possible solutions, recursion
  return solve(values, weights, w, n-1);

  // memoisation
  // T=O(n*w) S=O(n*w)
  vector<vector<int>> dp(n, vector<int> (w+1, -1));
  return solve(values, weights, w, n-1, dp);

  // tabulation
  // space optimization
  // T=O(n*w) S=O(w)
//   vector<vector<int>> dp(n, vector<int>(w + 1, 0));
vector<int> prev(w+1, 0), curr(w+1, 0);

  for (int i = weights[0]; i <= w; i++) {
      prev[i] = values[0];
  }

  for (int i = 1; i < n; i++) {
    for (int j = 1; j <= w; j++) {
      int notPick = prev[j];
      int pick = 0;
      if (j - weights[i] >= 0)
        pick = values[i] + prev[j-weights[i]];

      // return
      curr[j] = max(pick, notPick);
    }
	prev = curr;
  }

  return prev[w];
}
