bool isValidParenthesis(string s)
{
    // Approach: using stack
    // T=O(N) S=O(N)
    stack<int> st;
    st.push(0);
    if(expression.size() == 0) return true;
    for(int i=0; i<expression.size(); i++){
        if((st.top()=='(' && expression[i]==')') || 
        (st.top()=='{' && expression[i]=='}') ||
        (st.top()=='[' && expression[i]==']')) st.pop();
        else st.push(expression[i]);
    }
    st.pop();
    return st.empty();
}
