#include <bits/stdc++.h>
  // function for dfs
    bool dfs(vector<int> adj[], int visited[], int pathVisited[], int node){
        visited[node] = 1;
        pathVisited[node] = 1;
        
        for(auto neighbour: adj[node]){
            if(!visited[neighbour]){
                if(dfs(adj, visited, pathVisited, neighbour)) return 1;
            }
            else if(pathVisited[neighbour]){
                return true;
            }
        }
        pathVisited[node] = 0;
        return 0;
    }
    

int detectCycleInDirectedGraph(int V, vector < pair < int, int >> & edges) {
    // make adjacency list
    vector<int> adj[V+1];
    for(auto it: edges){
      adj[it.first].push_back(it.second);
    }

    // using dfs
        int visited[V+1] = {0};
        int pathVisited[V+1] = {0};
        
        for(int i=1; i<=V; i++){
            if(!visited[i]){
                if(dfs(adj, visited, pathVisited, i)) return 1;
            }
        }
        
    // using bfs or kahn's algorithm
        int indegree[V+1] = {0};
        
        for(int i=1; i<=V; i++){
            for(auto neighbour: adj[i]){
                indegree[neighbour]++;
            }
        }
        
        queue<int> q;
        int count = 0;
        
        for(int i=1; i<=V; i++){
            if(indegree[i] == 0) q.push(i);
        }
        
        while(!q.empty()){
            int frontnode = q.front();
            q.pop();
            count++;
            
            for(auto i: adj[frontnode]){
                indegree[i]--;
                if(indegree[i] == 0) q.push(i);
            }
        }
        
        if(count != V) return 1;
        
        return 0;
}
