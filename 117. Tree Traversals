#include <bits/stdc++.h> 

vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    // Approach: in preorder root->left->right
    // inorder left->root->right
    // postorder left->right->root
    // we will use this observation that for preorder we will iterate root first, in inorder
    // second  and in postorder last
    // T=O(N) S=O(1)
    stack<pair<BinaryTreeNode<int>*, int>> st;
    st.push({root, 1});
    vector<vector<int>> ans;
    vector<int> preorder;
    vector<int> inorder;
    vector<int> postorder;

    if(root == NULL) return ans;

    while(!st.empty()){
        auto it = st.top();
        st.pop();
        BinaryTreeNode<int>* node = it.first;
        int count = it.second;

        // for preorder 
        if(count == 1){
            preorder.push_back(node->data);
            count++;
            st.push({node, count});

            if(node->left) st.push({node->left, 1});
        }

        // for inorder
        else if(count == 2){
            inorder.push_back(node->data);
            count++;
            st.push({node, count});

            if(node->right) st.push({node->right, 1});
        }

        // for postorder
        else if(count == 3){
            postorder.push_back(node->data);
        }
    }

    ans.push_back(inorder);
    ans.push_back(preorder);
    ans.push_back(postorder);

    return ans;
}
