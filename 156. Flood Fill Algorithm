#include <bits/stdc++.h>
void dfs(int row, int col, vector<vector<int>>&ans,
     vector<vector<int>>& image, int newColor, int delRow[], int delCol[],
     int iniColor) {
        // color with new color
        ans[row][col] = newColor; 
        int n = image.size();
        int m = image[0].size(); 
        // there are exactly 4 neighbours
        for(int i = 0;i<4;i++) {
            int nrow = row + delRow[i]; 
            int ncol = col + delCol[i]; 
            // check for valid coordinate 
            // then check for same initial color and unvisited pixel
            if(nrow>=0 && nrow<n && ncol>=0 && ncol < m && 
            image[nrow][ncol] == iniColor && ans[nrow][ncol] != newColor) {
                dfs(nrow, ncol, ans, image, newColor, delRow, delCol, iniColor); 
            }
         }
}

vector<vector<int>> floodFill(vector<vector<int>> &image, int x, int y, int newColor)
{
    // using graph: BFS traversal
    // T=O(n*m) S=O(n*m)
    queue<pair<int, int>> q;
    q.push({x, y});

    int delRow[] = {-1, 0, +1, 0};
    int delCol[] = {0, +1, 0, -1}; 

    int n = image.size();
    int m = image[0].size();
    int color = image[x][y];

    while(!q.empty()){
        auto it = q.front();
        q.pop();
        int row = it.first;
        int col = it.second;
        image[row][col] = newColor;

        for(int i=0; i<4; i++){
            int nrow = row + delRow[i];
            int ncol = col + delCol[i];

            if(nrow<n && nrow>=0 && ncol<m && ncol>=0 && image[nrow][ncol] == color && image[nrow][ncol] != newColor){
                q.push({nrow, ncol});
            }
        }
    }
    return image;

        // using dfs traversal
        // T=O(n*m) S=O(n+m) due to recursive stack
        int iniColor = image[x][y]; 
        vector<vector<int>> ans = image; 
        // delta row and delta column for neighbours
        int delRow[] = {-1, 0, +1, 0};
        int delCol[] = {0, +1, 0, -1}; 
        dfs(x, y, ans, image, newColor, delRow, delCol, iniColor); 
        return ans; 
}
