#include <bits/stdc++.h>

// Function for merge sort
int merge(vector<int> &row1, vector<int> &row2, int m, int n, int k){
    int i = 0;
    int j = 0;
    int ans = 0;

    while(i<m && j<n){
        if(row1[i] <= row2[j]){
            ans = row1[i];
            i++;
        }
        else {
            ans = row2[j];
            j++;
        }
        if(i+j == k) return ans;
    }

    while(i<m){
        ans = row1[i];
        i++;
        if(i+j == k) return ans;
    }

    while(j<n){
        ans = row2[j];
        j++;
        if(i+j == k) return ans;
    }

    return 0;
}

// Function for binary search
int solve(vector<int> row1, vector<int> row2, int k){
    int m = row1.size();
    int n = row2.size();
    int low = max(0, k-n);
    int high = min(k, m);

    while(low <= high){
        int cut1 = (low+high)>>1;
        int cut2 = k-cut1;

        int l1 = cut1 == 0 ? l1 = INT_MIN : row1[cut1-1];
        int l2 = cut2 == 0 ? l2 = INT_MIN : row2[cut2-1];
        int r1 = cut1 == m ? r1 = INT_MAX : row1[cut1];
        int r2 = cut2 == n ? r2 = INT_MAX : row2[cut2];

        if(l1<=r2 && l2<=r1){
            return max(l1, l2);
        }
        else if(l1>l2){
            high = cut1-1;
        }
        else low = cut1+1;
    }
    return 1;
}

int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int m, int n, int k) {
    // Approach 1: merge sort
    // T=O(m+n) S=O(1)
    // return merge(row1, row2, m, n, k);

    // Approach 2: binary search
    return solve(row1, row2, k);
}
