vector<int> nextPermutation(vector<int> &permutation, int n)
{
    //  find the first number's index from last that does not follow decreasing order
    int ind = -1;

    for(int i=n-1; i>=1; i--){
        if(permutation[i] > permutation[i-1]){
            ind = i-1;
            break;
        }
    }

    // if current permutation is last one then simply reverse the permutation
    if(ind == -1){
        reverse(permutation.begin(), permutation.end());
        return permutation;
    }

    // find the first larger number from last than number at index to swap
    for(int i=n-1; i>ind; i--){
        if(permutation[i] > permutation[ind]) {
            swap(permutation[ind], permutation[i]);
            break;
        }
    }

    // reverse the elements that lie between index+1 and end of array
    reverse(permutation.begin() + ind + 1, permutation.end());
    return permutation;
}
