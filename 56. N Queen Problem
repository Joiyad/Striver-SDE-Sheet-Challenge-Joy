bool isPossible(int row, int col, vector<vector<int>> &board, int n){
    int duplicateRow = row;
    int duplicateCol = col;

    // upper diagonal check
    while(row>=0 && col>=0){
        if(board[row][col] == 1) return false;
        row--;
        col--;
    }

    row = duplicateRow;
    col = duplicateCol;

    // lower diagonal check
    while(row<n && col>=0){
        if(board[row][col] == 1) return false;
        row++;
        col--;
    }

    row = duplicateRow;
    col = duplicateCol;

    // same row check
    while(col>=0){
        if(board[row][col] == 1) return false;
        col--;
    }

    return true;
}

void solve(int col, int n, vector<vector<int>> &ans, vector<vector<int>> &board){
    // base case
    if(col == n){
        vector<int> temp;
        int n = board.size();
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                temp.push_back(board[i][j]);
            }
        }
        ans.push_back(temp);
    }

    for(int row=0; row<n; row++){
        if(isPossible(row, col, board, n)){
            board[row][col] = 1;
            solve(col+1, n, ans, board);
            board[row][col] = 0;
        }
    }
}

void solve(int col, int n, vector<vector<int>> &ans, vector<int> &leftRow, vector<int> &upperDiagonal, vector<int> &lowerDiagonal, vector<vector<int>> &board){
    // base case
    if(col == n){
        vector<int> temp;
        int n = board.size();
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                temp.push_back(board[i][j]);
            }
        }
        ans.push_back(temp);
        return;
    }

    for(int row=0; row<n; row++){
        if(leftRow[row] == 0 && upperDiagonal[n-1+col-row] == 0 && lowerDiagonal[row+col] == 0){
            board[row][col] = 1;
            leftRow[row] = 1;
            upperDiagonal[n-1+col-row] = 1;
            lowerDiagonal[row+col] = 1;
            solve(col+1, n, ans, leftRow, upperDiagonal, lowerDiagonal, board);
            board[row][col] = 0;
            leftRow[row] = 0;
            upperDiagonal[n-1+col-row] = 0;
            lowerDiagonal[row+col] = 0;
        }
    }
}

vector<vector<int>> solveNQueens(int n) {
    // Approach: here we will fill col wise and while filling each place we have to keep in 
    // mind that the previous queens should not be in same row, upper and lower diagonals
    // T=O(n!*n) S= recursive stack space O(n^2)
    vector<vector<int>> ans;
    vector<vector<int>> board(n, vector<int>(n, 0));
    // solve(0, n, ans, board);
    // return ans;

    // Space Optimized approach: this can be optimized further by looking the table in which we 
    // are filling the values, from observation maximum value in array will be 2*n-1
    // T=O(n!*n) S=O(n)
    vector<int>leftRow(n, 0), upperDiagonal(2*n-1), lowerDiagonal(2*n-1);
    solve(0, n, ans, leftRow, upperDiagonal, lowerDiagonal, board);
    return ans;
}
