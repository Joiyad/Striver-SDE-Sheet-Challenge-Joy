    #include <bits/stdc++.h>
    // bfs
    bool CycleDetect(vector<int> adj[], int visited[], int src){
        visited[src] = 1;
        
        queue<pair<int, int>> q;
        q.push({src, -1});
        
        while(!q.empty()){
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            
            for(auto neighbour: adj[node]){
                if(!visited[neighbour]){
                    visited[neighbour] = 1;
                    q.push({neighbour, node});
                }
                else if(neighbour != parent){
                    return true;
                }
            }
        }
        return false;
    }
    
    //dfs
    bool dfs(vector<int> adj[], int visited[], int node, int parent){
        visited[node] = 1;
        
        for(auto neighbour: adj[node]){
            if(!visited[neighbour]){
                if(dfs(adj, visited, neighbour, node)) return true;
            }
            else if(neighbour != parent) return true;
        }
        return false;
    }

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
        // iterate and check using dfs or bfs
        // T=O(V+E) S=O(V)
        // make adjacency list
        vector<int> adj[n+1];
        for(int i=0; i<m; i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        int visited[n+1] = {0};
        for(int i=1; i<=n; i++){
            if(!visited[i]){
                if(CycleDetect(adj, visited, i)) return "Yes";
                // if(dfs(adj, visited, i, -1)) return "Yes";
            }
        }
        
        return "No";
}
