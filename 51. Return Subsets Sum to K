void solve(int i, int target, vector<int> &arr, vector<int> &v, vector<vector<int>> &ans){
    // base case
    if(i >= arr.size()){
      if (target == 0) {
        ans.push_back(v);
      }
        return;
    }

    // try all stuff
    v.push_back(arr[i]);
    solve(i+1, target-arr[i], arr, v, ans);
    v.pop_back();
    solve(i+1, target, arr, v, ans);
}

vector<vector<int>> findSubsetsThatSumToK(vector<int> arr, int n, int k)
{
    // approach: we will keep a target and reduce when it will become zero 
    // we will store that subset.
    vector<int> v;
    vector<vector<int>> ans;
    solve(0, k, arr, v, ans);
    return ans;
}
