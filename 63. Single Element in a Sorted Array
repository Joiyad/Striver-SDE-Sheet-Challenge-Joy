int singleNonDuplicate(vector<int>& arr)
{
	// Brute force: useing nested loops
	// T=O(n) S=O(1)
	int n = arr.size();
	// int i=1;
	// while(i<n){
	// 	if(arr[i] != arr[i-1]) return arr[i-1];
	// 	i = i+2;
	// }
	// if(i != n-1) return arr[n-1];
	// return -1;

	// Another approach: hashmap can be used but time complexity will not improve

	// Optimal approach: using binary search, given sorted array --> binary search
	// T=O(logn) S=O(1)
	int low = 0;
	int high = n-1;

	while(low<=high){
		int mid = (low+high)/2;
		// if even index
		if(mid%2 == 0){
			// if second instance is on odd index then it is left part and contains only twice
			// occuring elements so move ahead
			if(arr[mid] == arr[mid+1]) low = mid+1;
			// if at even index then move back
			else high = mid-1;
		}
		else{
			// if second instance is on even index then it is right part and contains lucky no.
			// move back
			if(arr[mid] == arr[mid+1]) high = mid-1;
			// if at odd index move ahead
			else low = mid+1;
		}
	}

	return arr[low];
}
