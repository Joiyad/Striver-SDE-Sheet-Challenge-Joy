// Approach: we will use doubly linked list and hashmap
// T=O(n) S=O(n)
#include <bits/stdc++.h>
class Node{
    public:
        int key;
        int val;
        Node* next;
        Node* prev;
        Node(int k, int v){
            key = k;
            val = v;
        }
};

class LRUCache
{
public:
    Node* head = new Node(-1, -1);
    Node* tail = new Node(-1, -1);
    int cap;
    unordered_map<int, Node*> umap;

    LRUCache(int capacity)
    {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
    }
    
    void addNode(Node* n){
        Node* temp = head->next;
        n->next = temp;
        n->prev = head;
        head->next = n;
        temp->prev = n;
    }

    void deleteNode(Node* n){
        Node* delNext = n->next;
        Node* delPrev = n->prev;
        delPrev->next = delNext;
        delNext->prev = delPrev;
    }

    int get(int key)
    {
        if(umap.find(key) != umap.end()){
            Node* resNode = umap[key];
            int res = resNode->val;
            umap.erase(key);
            deleteNode(resNode);
            addNode(resNode);
            umap[key] = head->next;
            return res;
        }
        return -1;
    }

    void put(int key, int value)
    {
        // if node is already present, delete it
        if(umap.find(key) != umap.end()){
            Node* foundNode = umap[key];
            umap.erase(key);
            deleteNode(foundNode);
        }

        // if capacity is reached delete LRU
        if(umap.size() == cap){
            umap.erase(tail->prev->key);
            deleteNode(tail->prev);
        }
        
        // insert node
        addNode(new Node(key, value));
        umap[key] = head->next;
    }
};
