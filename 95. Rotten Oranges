#include <bits/stdc++.h>

int minTimeToRot(vector<vector<int>>& grid, int n, int m)
{
    //using bfs traversal
    queue<pair<pair<int, int>, int>> q;
    vector<vector<int>> visited(n, vector<int> (m, 0));
    
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(grid[i][j] == 2){
              q.push({{i, j}, 0});
              visited[i][j] = 1;
            }
        }
    }

    int delRow[] = {-1, 0, +1, 0};
    int delCol[] = {0, +1, 0, -1};

    int minTime = 0;

    while(!q.empty()){
        auto it = q.front();
        q.pop();
        int row = it.first.first;
        int col = it.first.second;
        int t = it.second;
        minTime = max(minTime, t);

        for(int i=0; i<4; i++){
            int nrow = row + delRow[i];
            int ncol = col + delCol[i];

            if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && !visited[nrow][ncol] && grid[nrow][ncol] == 1){
                q.push({{nrow, ncol}, t+1});
                visited[nrow][ncol] = 1;
            }
        }
    }

    // check whether there is fresh orange or not
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(visited[i][j] != 1 && grid[i][j] == 1){
                    return -1;
                }
            }
        }
        
        return minTime;
}
