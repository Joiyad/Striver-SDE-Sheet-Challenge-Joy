int romanToInt(string s) {
    // Brute force
    // make all possible cases and calculate the number
    // T=O(n) S=O(1)
    int ans = 0;

    for(int i=s.size()-1; i>=0; i--){
        if(s[i] == 'I') ans += 1;
        else if(s[i] == 'V'){
            if(i>=0 && s[i-1] == 'I'){
                ans += 4;
                i--;
            }
            else ans += 5;
        }
        else if(s[i] == 'X'){
            if(i>=0 && s[i-1] == 'I'){
                ans += 9;
                i--;
            }
            else ans += 10;
        }
        else if(s[i] == 'L'){
            if(i>=0 && s[i-1] == 'X'){
                ans += 40;
                i--;
            }
            else ans += 50;
        }
        else if(s[i] == 'C'){
            if(i>=0 && s[i-1] == 'X'){
                ans += 90;
                i--;
            }
            else ans += 100;
        }
        else if(s[i] == 'D'){
            if(i>=0 && s[i-1] == 'C'){
                ans += 400;
                i--;
            }
            else ans += 500;
        }
        else if(s[i] == 'M'){
            if(i>=0 && s[i-1] == 'C'){
                ans += 900;
                i--;
            }
            else ans += 1000;
        }
    }

    return ans;

    // Approach 2: using map
    // T=O(n) S=O(n)
    int ans = 0;
    unordered_map<char, int> umap{{'M', 1000}, {'D', 500}, {'C', 100}, {'L', 50}, {'X', 10}, {'V', 5}, {'I', 1}};
    for(int i=0; i<s.size(); i++){
        if(umap[s[i]]<umap[s[i+1]]) ans -= umap[s[i]];
        else ans += umap[s[i]];
    }
    return ans;
}
